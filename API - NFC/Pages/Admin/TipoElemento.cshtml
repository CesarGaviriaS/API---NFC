@page
@model API___NFC.Pages.Admin.TipoElementoModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Gestión de Tipos de Elemento";
}

<style>
    .badge-role {
        font-size: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }

    .table tbody tr {
        transition: all 0.2s ease;
    }

        .table tbody tr:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
</style>

<div class="main-content">
    <partial name="_AdminSubNav" />

    <!-- Header con título y botón -->
    <div class="card border-0 shadow-sm mb-3 bg-success text-white">
        <div class="card-body py-3">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3 class="mb-0"><i class="bi bi-tags-fill me-2"></i>@ViewData["Title"]</h3>
                </div>
                <button type="button" class="btn btn-light" onclick="abrirModal()">
                    <i class="bi bi-plus-circle-fill me-2"></i>Crear Tipo
                </button>
            </div>
        </div>
    </div>

    <!-- Filtros compactos (solo búsqueda) -->
    <div class="card border-0 shadow-sm mb-3">
        <div class="card-body py-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-10">
                    <input type="text"
                           class="form-control form-control-sm"
                           id="searchInput"
                           placeholder="🔍 Buscar tipo de elemento por nombre...">
                </div>
                <div class="col-md-1">
                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="limpiarFiltros()">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                </div>
                <div class="col-md-1 text-center">
                    <span class="badge bg-success py-2 px-3" id="resultadosContador">0</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla moderna -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th class="py-3" style="width: 10%;">
                                <i class="bi bi-hash me-1"></i>ID
                            </th>
                            <th class="py-3">
                                <i class="bi bi-tag-fill me-1"></i>Nombre del Tipo
                            </th>
                            <th class="py-3 text-center" style="width: 15%;">
                                <i class="bi bi-gear-fill me-1"></i>Acciones
                            </th>
                        </tr>
                    </thead>
                    <tbody id="tablaDatos">
                        <!-- Se llenará dinámicamente -->
                    </tbody>
                </table>
            </div>

            <!-- Estado vacío -->
            <div id="emptyState" class="text-center py-5 d-none">
                <i class="bi bi-inbox display-1 text-muted opacity-25"></i>
                <p class="text-muted mt-3 fs-5">No se encontraron tipos de elemento</p>
                <p class="text-muted">Intenta ajustar los filtros de búsqueda</p>
            </div>
        </div>
    </div>

    <!-- Paginación -->
    <div class="card border-0 shadow-sm mt-3">
        <div class="card-body py-2">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="d-flex align-items-center">
                        <span class="text-muted me-2">Mostrar:</span>
                        <select class="form-select form-select-sm w-auto" onchange="cambiarPageSize(this.value)">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                        </select>
                        <span class="text-muted ms-2">registros por página</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div id="paginationContainer" class="d-flex justify-content-end">
                        <!-- La paginación se genera aquí dinámicamente -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear/editar -->
<div class="modal fade" id="editorModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalTitulo">
                    <i class="bi bi-tag-fill me-2"></i>Tipo de Elemento
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="formularioEditor">
                    <input type="hidden" id="idInput">
                    <div class="mb-3">
                        <label for="nombreInput" class="form-label fw-semibold">
                            <i class="bi bi-tag-fill me-1"></i>Nombre del Tipo de Elemento
                        </label>
                        <input type="text"
                               class="form-control form-control-lg"
                               id="nombreInput"
                               placeholder="Ej: Laptop, Tablet, Proyector..."
                               required>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Este tipo se usará para categorizar los elementos del inventario
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cerrar
                </button>
                <button type="button" class="btn btn-success" onclick="guardar()">
                    <i class="bi bi-check-circle me-1"></i>Guardar Cambios
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/admin/tipoElemento.js"></script>
    <script>
                document.addEventListener('DOMContentLoaded', function () {
            const apiUrl = '/api/tipoelemento';
            const apiUrlPaginated = '/api/tipoelemento/paginated';
            const editorModal = new bootstrap.Modal(document.getElementById('editorModal'));
            const idInput = document.getElementById('idInput');
            const nombreInput = document.getElementById('nombreInput');
            const modalTitulo = document.getElementById('modalTitulo');
            const tablaDatos = document.getElementById('tablaDatos');
            const searchInput = document.getElementById('searchInput');
            const resultadosContador = document.getElementById('resultadosContador');
            const emptyState = document.getElementById('emptyState');
            const paginationContainer = document.getElementById('paginationContainer');

            // Variables de paginación
            let currentPage = 1;
            let pageSize = 10;
            let totalRecords = 0;
            let totalPages = 0;
            let currentSearchTerm = '';

            // --- CARGAR DATOS CON PAGINACIÓN ---
            const cargarDatos = async (page = 1, searchTerm = '') => {
                try {
                    // Construir URL con parámetros de paginación
                    let url = `${apiUrlPaginated}?page=${page}&pageSize=${pageSize}`;

                    if (searchTerm) {
                        url += `&search=${encodeURIComponent(searchTerm)}`;
                    }

                    const response = await fetch(url);
                    if (!response.ok) throw new Error('Error al cargar los datos.');

                    const data = await response.json();

                    // Actualizar variables de paginación
                    currentPage = data.page;
                    totalRecords = data.totalRecords;
                    totalPages = data.totalPages;

                    actualizarTabla(data.data);
                    actualizarContador(data);
                    actualizarPaginacion(data);

                } catch (error) {
                    console.error(error);
                    mostrarError('Error al cargar los datos: ' + error.message);
                }
            };

            // --- ACTUALIZAR TABLA CON DATOS ---
            const actualizarTabla = (datos) => {
                tablaDatos.innerHTML = '';

                if (datos.length === 0) {
                    emptyState.classList.remove('d-none');
                    return;
                }

                emptyState.classList.add('d-none');

                datos.forEach(item => {
                    const fila = document.createElement('tr');
                    fila.innerHTML = `
                        <td class="fw-semibold">${item.idTipoElemento}</td>
                        <td>
                            <span class="badge bg-light text-dark fs-6">${item.nombreTipoElemento}</span>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-warning me-1" onclick="abrirModal(${item.idTipoElemento}, '${item.nombreTipoElemento.replace(/'/g, "\\'")}')">
                                <i class="bi bi-pencil-fill"></i> Editar
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="desactivar(${item.idTipoElemento})">
                                <i class="bi bi-trash-fill"></i> Borrar
                            </button>
                        </td>
                    `;
                    tablaDatos.appendChild(fila);
                });
            };

            // --- ACTUALIZAR CONTADOR DE RESULTADOS ---
            const actualizarContador = (data) => {
                const startItem = ((currentPage - 1) * pageSize) + 1;
                const endItem = Math.min(currentPage * pageSize, totalRecords);

                resultadosContador.textContent = `${startItem}-${endItem} de ${totalRecords}`;
                resultadosContador.className = `badge py-2 px-3 bg-success`;
            };

            // --- ACTUALIZAR PAGINACIÓN ---
            const actualizarPaginacion = (data) => {
                if (!paginationContainer) return;

                paginationContainer.innerHTML = '';

                if (totalPages <= 1) return;

                const ul = document.createElement('ul');
                ul.className = 'pagination pagination-sm justify-content-center mb-0';

                // Botón Anterior
                const liPrev = document.createElement('li');
                liPrev.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                liPrev.innerHTML = `
                    <a class="page-link" href="#" ${currentPage > 1 ? `onclick="cambiarPagina(${currentPage - 1})"` : ''}>
                        <i class="bi bi-chevron-left"></i>
                    </a>
                `;
                ul.appendChild(liPrev);

                // Números de página (mostrar máximo 5 páginas)
                const startPage = Math.max(1, currentPage - 2);
                const endPage = Math.min(totalPages, startPage + 4);

                for (let i = startPage; i <= endPage; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    li.innerHTML = `<a class="page-link" href="#" onclick="cambiarPagina(${i})">${i}</a>`;
                    ul.appendChild(li);
                }

                // Botón Siguiente
                const liNext = document.createElement('li');
                liNext.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                liNext.innerHTML = `
                    <a class="page-link" href="#" ${currentPage < totalPages ? `onclick="cambiarPagina(${currentPage + 1})"` : ''}>
                        <i class="bi bi-chevron-right"></i>
                    </a>
                `;
                ul.appendChild(liNext);

                paginationContainer.appendChild(ul);
            };

            // --- CAMBIAR PÁGINA ---
            window.cambiarPagina = (nuevaPagina) => {
                currentPage = nuevaPagina;
                cargarDatos(currentPage, currentSearchTerm);
            };

            // --- CAMBIAR TAMAÑO DE PÁGINA ---
            window.cambiarPageSize = (nuevoSize) => {
                pageSize = parseInt(nuevoSize);
                currentPage = 1;
                cargarDatos(currentPage, currentSearchTerm);
            };

            // --- APLICAR FILTROS DE BÚSQUEDA ---
            const aplicarFiltros = () => {
                currentSearchTerm = searchInput.value.trim();
                currentPage = 1;
                cargarDatos(currentPage, currentSearchTerm);
            };

            // --- LIMPIAR FILTROS ---
            window.limpiarFiltros = () => {
                searchInput.value = '';
                currentSearchTerm = '';
                currentPage = 1;
                cargarDatos(currentPage);
            };

            // --- MOSTRAR ERROR ---
            const mostrarError = (mensaje) => {
                tablaDatos.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center text-danger py-4">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            ${mensaje}
                        </td>
                    </tr>`;
                emptyState.classList.add('d-none');
                if (paginationContainer) paginationContainer.innerHTML = '';
            };

            // --- ABRIR EL MODAL (PARA CREAR O EDITAR) ---
            window.abrirModal = (id = 0, nombre = '') => {
                idInput.value = id;
                nombreInput.value = nombre;
                modalTitulo.textContent = id === 0 ? 'Crear Nuevo Tipo de Elemento' : 'Editar Tipo de Elemento';
                nombreInput.classList.remove('is-invalid');
                editorModal.show();
                setTimeout(() => nombreInput.focus(), 500);
            };

            // --- VALIDAR FORMULARIO ---
            const validarFormulario = () => {
                const nombre = nombreInput.value.trim();
                if (!nombre) {
                    nombreInput.classList.add('is-invalid');
                    nombreInput.focus();
                    return false;
                }
                nombreInput.classList.remove('is-invalid');
                return true;
            };

            // --- GUARDAR (CREAR O ACTUALIZAR) ---
            window.guardar = async () => {
                if (!validarFormulario()) return;

                const id = idInput.value;
                const esNuevo = id == 0;

                const data = {
                    idTipoElemento: parseInt(id) || 0,
                    nombreTipoElemento: nombreInput.value.trim()
                };

                const url = esNuevo ? apiUrl : `${apiUrl}/${id}`;
                const method = esNuevo ? 'POST' : 'PUT';

                try {
                    const response = await fetch(url, {
                        method: method,
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    if (!response.ok) {
                        const errorData = await response.text();
                        throw new Error(errorData || 'Error al guardar');
                    }

                    editorModal.hide();
                    mostrarMensajeExito(esNuevo ? 'Tipo de elemento creado exitosamente' : 'Tipo de elemento actualizado exitosamente');
                    cargarDatos(currentPage, currentSearchTerm);
                } catch (error) {
                    console.error(error);
                    mostrarError('Error al guardar: ' + error.message);
                }
            };

            // --- MOSTRAR MENSAJE DE ÉXITO ---
            const mostrarMensajeExito = (mensaje) => {
                // Implementar toast o alerta
                alert(mensaje);
            };

            // --- DESACTIVAR (BORRADO LÓGICO) ---
            window.desactivar = async (id) => {
                if (!confirm(`¿Está seguro de que desea borrar (desactivar) este tipo de elemento?`)) {
                    return;
                }

                try {
                    const response = await fetch(`${apiUrl}/${id}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Error al borrar.');

                    mostrarMensajeExito('Tipo de elemento borrado exitosamente');
                    cargarDatos(currentPage, currentSearchTerm);
                } catch (error) {
                    console.error(error);
                    mostrarError('Error al borrar: ' + error.message);
                }
            };

            // Configurar evento de búsqueda con debounce
            let searchTimeout;
            searchInput.addEventListener('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    aplicarFiltros();
                }, 500);
            });

            // Carga inicial de datos
            cargarDatos();
        });
    </script>
}