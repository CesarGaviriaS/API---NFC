@page
@model API___NFC.Pages.Admin.ProgramaModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Gestión de Programas";
}


<style>
    .badge-role {
        font-size: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }

    .table tbody tr {
        transition: all 0.2s ease;
    }

    .table tbody tr:hover {
        transform: translateX(5px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }

    .pagination .page-link {
        color: #198754;
        border: 1px solid #dee2e6;
    }

    .pagination .page-link:hover {
        color: #146c43;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .form-label.required::after {
        content: " *";
        color: red;
    }
</style>

<div class="main-content">
    <partial name="_AdminSubNav" />

    <!-- Header -->
    <div class="card border-0 shadow-sm mb-3 bg-success text-white">
        <div class="card-body py-3 d-flex justify-content-between align-items-center">
            <h3 class="mb-0"><i class="bi bi-book-fill me-2"></i>@ViewData["Title"]</h3>
            <button type="button" class="btn btn-light btn-lg" onclick="abrirModalCrear()">
                <i class="bi bi-plus-circle-fill me-2"></i>Crear Programa
            </button>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card border-0 shadow-sm mb-3">
        <div class="card-body py-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-5">
                    <input id="searchInput" class="form-control form-control-sm" placeholder="🔍 Buscar por nombre o código..." />
                </div>
                <div class="col-md-3">
                    <select id="nivelFormacionFilter" class="form-select form-select-sm">
                        <option value="">Todos los niveles</option>
                        <option value="Técnico">Técnico</option>
                        <option value="Tecnólogo">Tecnólogo</option>
                        <option value="Especialización">Especialización</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="estadoFilter" class="form-select form-select-sm">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="limpiarFiltros()">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                </div>
                <div class="col-md-1 text-center">
                    <span id="resultadosContador" class="badge bg-success py-2 px-3">0</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th class="py-3"><i class="bi bi-hash me-1"></i>ID</th>
                            <th class="py-3"><i class="bi bi-book me-1"></i>Nombre del Programa</th>
                            <th class="py-3"><i class="bi bi-upc-scan me-1"></i>Código</th>
                            <th class="py-3"><i class="bi bi-mortarboard me-1"></i>Nivel de Formación</th>
                            <th class="py-3"><i class="bi bi-calendar me-1"></i>Fecha Creación</th>
                            <th class="py-3"><i class="bi bi-toggle-on me-1"></i>Estado</th>
                            <th class="py-3 text-center" style="width:12%"><i class="bi bi-gear-fill me-1"></i>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaDatos">
                        <tr>
                            <td colspan="7" class="text-center py-4">
                                <div class="spinner-border text-success"></div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Estado vacío -->
            <div id="emptyState" class="text-center py-5 d-none">
                <i class="bi bi-inbox display-1 text-muted opacity-25"></i>
                <p class="text-muted mt-3 fs-5">No se encontraron programas</p>
            </div>

            <!-- Paginación -->
            <div id="paginacionContainer" class="d-flex justify-content-between align-items-center mt-3 px-3 pb-3">
                <div id="infoPaginacion">
                    <small class="text-muted">Cargando...</small>
                </div>
                <nav id="paginacionNav">
                    <ul class="pagination pagination-sm mb-0"></ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- MODAL -->
<div class="modal fade" id="editorModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalTitulo">
                    <i class="bi bi-book-fill me-2"></i>Nuevo Programa
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="formularioEditor" onsubmit="return false;">
                    <input type="hidden" id="idInput">

                    <div class="mb-3">
                        <label class="form-label required">Nombre del Programa</label>
                        <input type="text" id="nombreProgramaInput" class="form-control" required placeholder="Ej: Análisis y Desarrollo de Software" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label required">Código del Programa</label>
                            <input type="text" id="codigoInput" class="form-control" required placeholder="Ej: 228106" />
                            <small class="text-muted">Código único del programa SENA</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label required">Nivel de Formación</label>
                            <select id="nivelFormacionInput" class="form-select" required>
                                <option value="">Seleccione...</option>
                                <option value="Técnico">Técnico</option>
                                <option value="Tecnólogo">Tecnólogo</option>
                                <option value="Especialización">Especialización</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="estadoInput" checked>
                        <label class="form-check-label" for="estadoInput">Programa Activo</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cerrar
                </button>
                <button type="button" class="btn btn-success" onclick="guardarPrograma()">
                    <i class="bi bi-check-circle me-1"></i>Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// ========== GESTIÓN DE PROGRAMAS ==========
document.addEventListener('DOMContentLoaded', function () {
    // ========== CONFIGURACIÓN API ==========
    const API = {
        programas: '/api/Programas'
    };

    // ========== ELEMENTOS DEL DOM ==========
    const tablaDatos = document.getElementById('tablaDatos');
    const searchInput = document.getElementById('searchInput');
    const nivelFormacionFilter = document.getElementById('nivelFormacionFilter');
    const estadoFilter = document.getElementById('estadoFilter');
    const resultadosContador = document.getElementById('resultadosContador');
    const emptyState = document.getElementById('emptyState');

    // Modal
    const editorModal = new bootstrap.Modal(document.getElementById('editorModal'));
    const modalTitulo = document.getElementById('modalTitulo');
    const idInput = document.getElementById('idInput');
    const nombreProgramaInput = document.getElementById('nombreProgramaInput');
    const codigoInput = document.getElementById('codigoInput');
    const nivelFormacionInput = document.getElementById('nivelFormacionInput');
    const estadoInput = document.getElementById('estadoInput');

    // ========== ESTADO ==========
    let paginaActual = 1;
    let pageSize = 10;
    let todosLosProgramas = [];

    // ========== INICIALIZACIÓN ==========
    init();

    function init() {
        cargarDatosPaginados(1);
        setupEventListeners();
    }

    // ========== EVENT LISTENERS ==========
    function setupEventListeners() {
        // Búsqueda con debounce
        let timeout;
        searchInput.addEventListener('input', () => {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                aplicarFiltros();
            }, 300);
        });

        // Filtros
        [nivelFormacionFilter, estadoFilter].forEach(filter => {
            filter.addEventListener('change', () => {
                aplicarFiltros();
            });
        });
    }

    // ========== CARGAR DATOS PAGINADOS ==========
    async function cargarDatosPaginados(pagina = 1) {
        try {
            paginaActual = pagina;
            tablaDatos.innerHTML = '<tr><td colspan="7" class="text-center py-4"><div class="spinner-border text-success"></div></td></tr>';

            const response = await fetch(`${API.programas}/paged?pageNumber=${pagina}&pageSize=${pageSize}`);
            
            if (!response.ok) {
                throw new Error(`Error ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            // Soporta ambos formatos
            todosLosProgramas = data.items || data.Items || [];
            const totalPaginas = data.totalPages || data.TotalPages || 1;
            const totalRegistros = data.totalCount || data.TotalCount || 0;

            renderizarTabla(todosLosProgramas);
            renderizarPaginacionServidor(pagina, totalPaginas, totalRegistros);

        } catch (error) {
            console.error('❌ Error al cargar:', error);
            tablaDatos.innerHTML = `<tr><td colspan="7" class="text-center text-danger py-4">
                <i class="bi bi-exclamation-triangle me-2"></i>Error: ${error.message}
            </td></tr>`;
            emptyState.classList.add('d-none');
        }
    }

    // ========== APLICAR FILTROS ==========
    function aplicarFiltros() {
        const search = searchInput.value.toLowerCase().trim();
        const nivelFiltro = nivelFormacionFilter.value;
        const estadoFiltro = estadoFilter.value;

        // Si NO hay filtros, usar paginación del servidor
        if (!search && !nivelFiltro && !estadoFiltro) {
            document.getElementById('paginacionContainer').style.display = 'flex';
            cargarDatosPaginados(1);
            return;
        }

        // Si hay filtros, aplicar localmente
        document.getElementById('paginacionContainer').style.display = 'none';

        let filtrados = todosLosProgramas.filter(p => {
            const coincideBusqueda = !search ||
                (p.nombrePrograma && p.nombrePrograma.toLowerCase().includes(search)) ||
                (p.codigo && p.codigo.toLowerCase().includes(search));

            const coincideNivel = !nivelFiltro || p.nivelFormacion === nivelFiltro;
            const coincideEstado = !estadoFiltro || p.estado?.toString() === estadoFiltro;

            return coincideBusqueda && coincideNivel && coincideEstado;
        });

        renderizarTabla(filtrados);
    }

    // ========== RENDERIZAR TABLA ==========
    function renderizarTabla(programas) {
        resultadosContador.textContent = programas.length;

        if (programas.length === 0) {
            tablaDatos.innerHTML = '';
            emptyState.classList.remove('d-none');
            return;
        }

        emptyState.classList.add('d-none');

        tablaDatos.innerHTML = programas.map(p => {
            const fecha = p.fechaCreacion ? new Date(p.fechaCreacion).toLocaleDateString() : 'N/A';
            
            let nivelBadge = 'bg-info';
            if (p.nivelFormacion === 'Tecnólogo') nivelBadge = 'bg-primary';
            else if (p.nivelFormacion === 'Especialización') nivelBadge = 'bg-warning text-dark';

            return `
                <tr>
                    <td class="fw-semibold">${p.idPrograma}</td>
                    <td>${p.nombrePrograma || 'N/A'}</td>
                    <td><span class="badge bg-secondary">${p.codigo || 'N/A'}</span></td>
                    <td><span class="badge ${nivelBadge}">${p.nivelFormacion || 'N/A'}</span></td>
                    <td><small class="text-muted">${fecha}</small></td>
                    <td><span class="badge ${p.estado ? 'bg-success' : 'bg-danger'}">${p.estado ? 'Activo' : 'Inactivo'}</span></td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-warning" onclick="editarProgramaGlobal(${p.idPrograma})">
                            <i class="bi bi-pencil-fill"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="eliminarProgramaGlobal(${p.idPrograma})">
                            <i class="bi bi-trash-fill"></i>
                        </button>
                    </td>
                </tr>
            `;
        }).join('');
    }

    // ========== PAGINACIÓN DEL SERVIDOR ==========
    function renderizarPaginacionServidor(paginaActual, totalPaginas, totalRegistros) {
        const paginacionNav = document.getElementById('paginacionNav');
        const infoPaginacion = document.getElementById('infoPaginacion');
        const paginacionContainer = document.getElementById('paginacionContainer');

        paginacionContainer.style.display = 'flex';

        const inicio = ((paginaActual - 1) * pageSize) + 1;
        const fin = Math.min(paginaActual * pageSize, totalRegistros);

        infoPaginacion.innerHTML = `<small class="text-muted">Mostrando ${inicio}-${fin} de ${totalRegistros} registros</small>`;

        if (totalPaginas <= 1) {
            paginacionNav.innerHTML = '';
            return;
        }

        let html = '<ul class="pagination pagination-sm mb-0">';

        html += `<li class="page-item ${paginaActual === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="cambiarPaginaServidor(${paginaActual - 1}); return false;">«</a>
        </li>`;

        for (let i = 1; i <= totalPaginas; i++) {
            if (i === 1 || i === totalPaginas || (i >= paginaActual - 2 && i <= paginaActual + 2)) {
                html += `<li class="page-item ${i === paginaActual ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="cambiarPaginaServidor(${i}); return false;">${i}</a>
                </li>`;
            } else if (i === paginaActual - 3 || i === paginaActual + 3) {
                html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
        }

        html += `<li class="page-item ${paginaActual === totalPaginas ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="cambiarPaginaServidor(${paginaActual + 1}); return false;">»</a>
        </li>`;

        html += '</ul>';
        paginacionNav.innerHTML = html;
    }

    window.cambiarPaginaServidor = function (pagina) {
        if (pagina < 1) return;
        cargarDatosPaginados(pagina);
    };

    // ========== ABRIR MODAL CREAR ==========
    window.abrirModalCrear = function () {
        modalTitulo.textContent = 'Nuevo Programa';
        document.getElementById('formularioEditor').reset();
        idInput.value = '';
        estadoInput.checked = true;
        editorModal.show();
    };

    // ========== EDITAR ==========
    window.editarProgramaGlobal = async function (id) {
        try {
            const response = await fetch(`${API.programas}/${id}`);
            if (!response.ok) throw new Error('Error al cargar programa');

            const data = await response.json();

            modalTitulo.textContent = 'Editar Programa';
            idInput.value = data.idPrograma;
            nombreProgramaInput.value = data.nombrePrograma || '';
            codigoInput.value = data.codigo || '';
            nivelFormacionInput.value = data.nivelFormacion || '';
            estadoInput.checked = data.estado ?? true;

            editorModal.show();

        } catch (error) {
            alert('Error: ' + error.message);
        }
    };

    // ========== GUARDAR ==========
    window.guardarPrograma = async function () {
        try {
            const id = parseInt(idInput.value) || 0;

            if (!nombreProgramaInput.value.trim() || !codigoInput.value.trim() || !nivelFormacionInput.value) {
                alert('Complete todos los campos obligatorios');
                return;
            }

            const data = {
                idPrograma: id,
                nombrePrograma: nombreProgramaInput.value.trim(),
                codigo: codigoInput.value.trim(),
                nivelFormacion: nivelFormacionInput.value,
                estado: estadoInput.checked
            };

            console.log('✅ Enviando:', data);

            const url = id === 0 ? API.programas : `${API.programas}/${id}`;
            const method = id === 0 ? 'POST' : 'PUT';

            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('❌ Error del servidor:', errorText);
                throw new Error(errorText || 'Error al guardar');
            }

            editorModal.hide();
            await cargarDatosPaginados(paginaActual);
            alert(id === 0 ? '✅ Programa creado exitosamente' : '✅ Programa actualizado exitosamente');

        } catch (error) {
            alert('❌ Error: ' + error.message);
            console.error('Error completo:', error);
        }
    };

    // ========== ELIMINAR ==========
    window.eliminarProgramaGlobal = async function (id) {
        if (!confirm('¿Eliminar este programa?')) return;

        try {
            const response = await fetch(`${API.programas}/${id}`, { method: 'DELETE' });
            if (!response.ok) throw new Error('Error al eliminar');

            await cargarDatosPaginados(paginaActual);
            alert('✅ Programa eliminado exitosamente');

        } catch (error) {
            alert('❌ Error: ' + error.message);
        }
    };

    // ========== LIMPIAR FILTROS ==========
    window.limpiarFiltros = function () {
        searchInput.value = '';
        nivelFormacionFilter.value = '';
        estadoFilter.value = '';
        paginaActual = 1;
        cargarDatosPaginados(1);
    };
});
</script>