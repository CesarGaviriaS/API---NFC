@page
@model API___NFC.Pages.Admin.ElementoModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Gestión de Elementos";
}

<style>
    .badge-role {
        font-size: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }

    .table tbody tr {
        transition: all 0.2s ease;
    }

        .table tbody tr:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }

    .pagination .page-link {
        color: #198754;
        border: 1px solid #dee2e6;
    }

        .pagination .page-link:hover {
            color: #146c43;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .form-label.required::after {
        content: " *";
        color: red;
    }
</style>

<div class="main-content">
    <partial name="_AdminSubNav" />

    <!-- Header -->
    <div class="card border-0 shadow-sm mb-3 bg-success text-white">
        <div class="card-body py-3 d-flex justify-content-between align-items-center">
            <h3 class="mb-0"><i class="bi bi-box-seam me-2"></i>@ViewData["Title"]</h3>
            <button type="button" class="btn btn-light btn-lg" onclick="abrirModalCrear()">
                <i class="bi bi-plus-circle-fill me-2"></i>Crear Elemento
            </button>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card border-0 shadow-sm mb-3">
        <div class="card-body py-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-4">
                    <input id="searchInput" class="form-control form-control-sm" placeholder="🔍 Buscar por marca, modelo, serial..." />
                </div>
                <div class="col-md-2">
                    <select id="tipoFilter" class="form-select form-select-sm">
                        <option value="">Todos los tipos</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="tipoPropietarioFilter" class="form-select form-select-sm">
                        <option value="">Todos</option>
                        <option value="Usuario">Usuario</option>
                        <option value="Aprendiz">Aprendiz</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="estadoFilter" class="form-select form-select-sm">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="limpiarFiltros()">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                </div>
                <div class="col-md-1 text-center">
                    <span id="resultadosContador" class="badge bg-success py-2 px-3">0</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th class="py-3"><i class="bi bi-hash me-1"></i>ID</th>
                            <th class="py-3"><i class="bi bi-box me-1"></i>Marca / Modelo</th>
                            <th class="py-3"><i class="bi bi-upc-scan me-1"></i>Serial</th>
                            <th class="py-3"><i class="bi bi-tag me-1"></i>Tipo</th>
                            <th class="py-3"><i class="bi bi-person me-1"></i>Propietario</th>
                            <th class="py-3"><i class="bi bi-wifi me-1"></i>NFC</th>
                            <th class="py-3"><i class="bi bi-toggle-on me-1"></i>Estado</th>
                            <th class="py-3 text-center" style="width:12%"><i class="bi bi-gear-fill me-1"></i>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaDatos">
                        <tr>
                            <td colspan="8" class="text-center py-4">
                                <div class="spinner-border text-success"></div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Estado vacío -->
            <div id="emptyState" class="text-center py-5 d-none">
                <i class="bi bi-inbox display-1 text-muted opacity-25"></i>
                <p class="text-muted mt-3 fs-5">No se encontraron elementos</p>
            </div>

            <!-- Paginación -->
            <div id="paginacionContainer" class="d-flex justify-content-between align-items-center mt-3 px-3 pb-3">
                <div id="infoPaginacion">
                    <small class="text-muted">Cargando...</small>
                </div>
                <nav id="paginacionNav">
                    <ul class="pagination pagination-sm mb-0"></ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- MODAL -->
<div class="modal fade" id="editorModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalTitulo">
                    <i class="bi bi-box-seam me-2"></i>Nuevo Elemento
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="formularioEditor" onsubmit="return false;">
                    <input type="hidden" id="idInput">

                    <!-- Información Básica -->
                    <h6 class="text-success mb-3">
                        <i class="bi bi-info-circle-fill me-2"></i>Información Básica
                    </h6>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label required">Tipo de Elemento</label>
                            <select id="tipoElementoIdInput" class="form-select" required>
                                <option value="">Seleccione...</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Marca</label>
                            <input type="text" id="marcaInput" class="form-control" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Modelo</label>
                            <input type="text" id="modeloInput" class="form-control" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label required">Serial</label>
                            <input type="text" id="serialInput" class="form-control" required />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Código NFC</label>
                            <input type="text" id="codigoNFCInput" class="form-control" />
                            <small class="text-muted">Opcional - Solo si tiene tag NFC</small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea id="descripcionInput" class="form-control" rows="3"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">URL de Imagen</label>
                        <input type="url" id="imagenUrlInput" class="form-control" placeholder="https://..." />
                    </div>

                    <hr class="my-4">

                    <!-- Propietario -->
                    <h6 class="text-success mb-3">
                        <i class="bi bi-person-fill me-2"></i>Propietario
                    </h6>

                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label required">Tipo de Propietario</label>
                            <select id="tipoPropietarioInput" class="form-select" required>
                                <option value="">Seleccione...</option>
                                <option value="Usuario">Usuario (Funcionario)</option>
                                <option value="Aprendiz">Aprendiz</option>
                            </select>
                        </div>
                        <div class="col-md-8 mb-3">
                            <label class="form-label required">Propietario</label>
                            <select id="propietarioIdInput" class="form-select" required disabled>
                                <option value="">Primero seleccione el tipo...</option>
                            </select>
                        </div>
                    </div>

                    <!-- Estado -->
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="estadoInput" checked>
                        <label class="form-check-label" for="estadoInput">Elemento Activo</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cerrar
                </button>
                <button type="button" class="btn btn-success" onclick="guardarElemento()">
                    <i class="bi bi-check-circle me-1"></i>Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // ========== GESTIÓN DE ELEMENTOS ==========
    document.addEventListener('DOMContentLoaded', function () {
        // ========== CONFIGURACIÓN API ==========
        const API = {
            elementos: '/api/Elementoes',
            tipoElementos: '/api/TipoElementoes',
            usuarios: '/api/Usuario',
            aprendiz: '/api/Aprendiz'
        };

        // ========== ELEMENTOS DEL DOM ==========
        const tablaDatos = document.getElementById('tablaDatos');
        const searchInput = document.getElementById('searchInput');
        const tipoFilter = document.getElementById('tipoFilter');
        const tipoPropietarioFilter = document.getElementById('tipoPropietarioFilter');
        const estadoFilter = document.getElementById('estadoFilter');
        const resultadosContador = document.getElementById('resultadosContador');
        const emptyState = document.getElementById('emptyState');

        // Modal
        const editorModal = new bootstrap.Modal(document.getElementById('editorModal'));
        const modalTitulo = document.getElementById('modalTitulo');
        const idInput = document.getElementById('idInput');
        const tipoElementoIdInput = document.getElementById('tipoElementoIdInput');
        const marcaInput = document.getElementById('marcaInput');
        const modeloInput = document.getElementById('modeloInput');
        const serialInput = document.getElementById('serialInput');
        const codigoNFCInput = document.getElementById('codigoNFCInput');
        const descripcionInput = document.getElementById('descripcionInput');
        const imagenUrlInput = document.getElementById('imagenUrlInput');
        const tipoPropietarioInput = document.getElementById('tipoPropietarioInput');
        const propietarioIdInput = document.getElementById('propietarioIdInput');
        const estadoInput = document.getElementById('estadoInput');

        // ========== ESTADO ==========
        let paginaActual = 1;
        let pageSize = 10;
        let todosLosElementos = [];
        let listaTiposElemento = [];
        let listaUsuarios = [];
        let listaAprendices = [];

        // ========== INICIALIZACIÓN ==========
        init();

        function init() {
            cargarTiposElemento();
            cargarPropietarios();
            cargarTodosLosDatos();
            setupEventListeners();
        }

        // ========== EVENT LISTENERS ==========
        function setupEventListeners() {
            // Búsqueda
            let timeout;
            searchInput.addEventListener('input', () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    paginaActual = 1;
                    aplicarFiltros();
                }, 300);
            });

            // Filtros
            [tipoFilter, tipoPropietarioFilter, estadoFilter].forEach(filter => {
                filter.addEventListener('change', () => {
                    paginaActual = 1;
                    aplicarFiltros();
                });
            });

            // Cambio de tipo de propietario
            tipoPropietarioInput.addEventListener('change', cargarPropietariosPorTipo);
        }

        // ========== CARGAR TIPOS DE ELEMENTO ==========
        async function cargarTiposElemento() {
            try {
                const response = await fetch(API.tipoElementos);
                listaTiposElemento = await response.json();

                tipoElementoIdInput.innerHTML = '<option value="">Seleccione...</option>';
                listaTiposElemento.forEach(t => {
                    tipoElementoIdInput.innerHTML += `<option value="${t.idTipoElemento}">${t.tipo}</option>`;
                });

                tipoFilter.innerHTML = '<option value="">Todos los tipos</option>';
                listaTiposElemento.forEach(t => {
                    tipoFilter.innerHTML += `<option value="${t.idTipoElemento}">${t.tipo}</option>`;
                });
            } catch (error) {
                console.error('Error al cargar tipos:', error);
            }
        }

        // ========== CARGAR PROPIETARIOS ==========
        async function cargarPropietarios() {
            try {
                const [responseUsuarios, responseAprendices] = await Promise.all([
                    fetch(API.usuarios),
                    fetch(API.aprendiz)
                ]);

                listaUsuarios = await responseUsuarios.json();
                listaAprendices = await responseAprendices.json();
            } catch (error) {
                console.error('Error al cargar propietarios:', error);
            }
        }

        // ========== CARGAR PROPIETARIOS POR TIPO ==========
        function cargarPropietariosPorTipo() {
            const tipo = tipoPropietarioInput.value;

            propietarioIdInput.innerHTML = '<option value="">Seleccione...</option>';
            propietarioIdInput.disabled = !tipo;

            if (tipo === 'Usuario') {
                listaUsuarios.forEach(u => {
                    propietarioIdInput.innerHTML += `<option value="${u.idUsuario}">${u.nombre} ${u.apellido} - ${u.rol}</option>`;
                });
            } else if (tipo === 'Aprendiz') {
                listaAprendices.forEach(a => {
                    propietarioIdInput.innerHTML += `<option value="${a.idAprendiz}">${a.nombre} ${a.apellido}</option>`;
                });
            }
        }

        // ========== CARGAR TODOS LOS DATOS ==========
        async function cargarTodosLosDatos() {
            try {
                tablaDatos.innerHTML = '<tr><td colspan="8" class="text-center py-4"><div class="spinner-border text-success"></div></td></tr>';

                const response = await fetch(API.elementos);
                if (!response.ok) throw new Error('Error al cargar elementos');

                todosLosElementos = await response.json();
                aplicarFiltros();

            } catch (error) {
                console.error('Error:', error);
                tablaDatos.innerHTML = `<tr><td colspan="8" class="text-center text-danger py-4">Error: ${error.message}</td></tr>`;
            }
        }

        // ========== APLICAR FILTROS ==========
        function aplicarFiltros() {
            const search = searchInput.value.toLowerCase();
            const tipoFiltro = tipoFilter.value;
            const tipoPropFiltro = tipoPropietarioFilter.value;
            const estadoFiltro = estadoFilter.value;

            let filtrados = todosLosElementos.filter(e => {
                const coincideBusqueda = !search ||
                    (e.marca && e.marca.toLowerCase().includes(search)) ||
                    (e.modelo && e.modelo.toLowerCase().includes(search)) ||
                    (e.serial && e.serial.toLowerCase().includes(search));

                const coincideTipo = !tipoFiltro || e.idTipoElemento == tipoFiltro;
                const coincideTipoProp = !tipoPropFiltro || e.tipoPropietario === tipoPropFiltro;
                const coincideEstado = !estadoFiltro || e.estado?.toString() === estadoFiltro;

                return coincideBusqueda && coincideTipo && coincideTipoProp && coincideEstado;
            });

            renderizarTabla(filtrados);
        }

        // ========== RENDERIZAR TABLA ==========
        function renderizarTabla(elementos) {
            const totalPaginas = Math.ceil(elementos.length / pageSize);
            const inicio = (paginaActual - 1) * pageSize;
            const fin = inicio + pageSize;
            const elementosPagina = elementos.slice(inicio, fin);

            resultadosContador.textContent = elementos.length;

            if (elementosPagina.length === 0) {
                tablaDatos.innerHTML = '';
                emptyState.classList.remove('d-none');
                document.getElementById('paginacionContainer').style.display = 'none';
                return;
            }

            emptyState.classList.add('d-none');
            document.getElementById('paginacionContainer').style.display = 'flex';

            tablaDatos.innerHTML = elementosPagina.map(e => {
                const tipoNombre = listaTiposElemento.find(t => t.idTipoElemento === e.idTipoElemento)?.tipo || 'N/A';
                const nfcBadge = e.codigoNFC
                    ? '<span class="badge bg-success"><i class="bi bi-wifi"></i> Sí</span>'
                    : '<span class="badge bg-secondary"><i class="bi bi-wifi-off"></i> No</span>';

                return `
                    <tr>
                        <td class="fw-semibold">${e.idElemento}</td>
                        <td>${e.marca || 'N/A'}<br><small class="text-muted">${e.modelo || 'Sin modelo'}</small></td>
                        <td><span class="badge bg-light text-dark">${e.serial || 'N/A'}</span></td>
                        <td><span class="badge bg-info text-dark">${tipoNombre}</span></td>
                        <td><span class="badge ${e.tipoPropietario === 'Usuario' ? 'bg-warning' : 'bg-primary'}">${e.tipoPropietario || 'N/A'}</span></td>
                        <td>${nfcBadge}</td>
                        <td><span class="badge ${e.estado ? 'bg-success' : 'bg-danger'}">${e.estado ? 'Activo' : 'Inactivo'}</span></td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-warning" onclick="editarElementoGlobal(${e.idElemento})">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="eliminarElementoGlobal(${e.idElemento})">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');

            renderizarPaginacion(totalPaginas, elementos.length);
        }

        // ========== PAGINACIÓN ==========
        function renderizarPaginacion(totalPaginas, totalRegistros) {
            const paginacionNav = document.getElementById('paginacionNav');
            const infoPaginacion = document.getElementById('infoPaginacion');

            if (totalPaginas <= 1) {
                paginacionNav.innerHTML = '';
                infoPaginacion.innerHTML = `<small class="text-muted">Mostrando ${totalRegistros} registros</small>`;
                return;
            }

            const inicio = ((paginaActual - 1) * pageSize) + 1;
            const fin = Math.min(paginaActual * pageSize, totalRegistros);

            infoPaginacion.innerHTML = `<small class="text-muted">Mostrando ${inicio}-${fin} de ${totalRegistros} registros</small>`;

            let html = '<ul class="pagination pagination-sm mb-0">';

            html += `<li class="page-item ${paginaActual === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="cambiarPaginaGlobal(${paginaActual - 1}); return false;">«</a>
            </li>`;

            for (let i = 1; i <= totalPaginas; i++) {
                if (i === 1 || i === totalPaginas || (i >= paginaActual - 2 && i <= paginaActual + 2)) {
                    html += `<li class="page-item ${i === paginaActual ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="cambiarPaginaGlobal(${i}); return false;">${i}</a>
                    </li>`;
                } else if (i === paginaActual - 3 || i === paginaActual + 3) {
                    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            html += `<li class="page-item ${paginaActual === totalPaginas ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="cambiarPaginaGlobal(${paginaActual + 1}); return false;">»</a>
            </li>`;

            html += '</ul>';
            paginacionNav.innerHTML = html;
        }

        window.cambiarPaginaGlobal = function (pagina) {
            paginaActual = pagina;
            aplicarFiltros();
        };

        // ========== ABRIR MODAL CREAR ==========
        window.abrirModalCrear = function () {
            modalTitulo.textContent = 'Nuevo Elemento';
            document.getElementById('formularioEditor').reset();
            idInput.value = '';
            estadoInput.checked = true;
            propietarioIdInput.disabled = true;
            editorModal.show();
        };

        // ========== EDITAR ==========
        window.editarElementoGlobal = async function (id) {
            try {
                const response = await fetch(`${API.elementos}/${id}`);
                if (!response.ok) throw new Error('Error al cargar elemento');

                const data = await response.json();

                modalTitulo.textContent = 'Editar Elemento';
                idInput.value = data.idElemento;
                tipoElementoIdInput.value = data.idTipoElemento || '';
                marcaInput.value = data.marca || '';
                modeloInput.value = data.modelo || '';
                serialInput.value = data.serial || '';
                codigoNFCInput.value = data.codigoNFC || '';
                descripcionInput.value = data.descripcion || '';
                imagenUrlInput.value = data.imagenUrl || '';
                tipoPropietarioInput.value = data.tipoPropietario || '';
                estadoInput.checked = data.estado ?? true;

                // Cargar propietarios según tipo
                cargarPropietariosPorTipo();

                // Esperar un momento para que se llenen las opciones
                setTimeout(() => {
                    propietarioIdInput.value = data.idPropietario || '';
                }, 100);

                editorModal.show();

            } catch (error) {
                alert('Error: ' + error.message);
            }
        };

        // ========== GUARDAR ==========
        window.guardarElemento = async function () {
            try {
                const id = parseInt(idInput.value) || 0;

                if (!tipoElementoIdInput.value || !serialInput.value.trim() || !tipoPropietarioInput.value || !propietarioIdInput.value) {
                    alert('Complete los campos obligatorios (Tipo, Serial, Tipo de Propietario y Propietario)');
                    return;
                }

                const data = {
                    idElemento: id,
                    idTipoElemento: parseInt(tipoElementoIdInput.value),
                    idPropietario: parseInt(propietarioIdInput.value),
                    tipoPropietario: tipoPropietarioInput.value,
                    marca: marcaInput.value.trim() || null,
                    modelo: modeloInput.value.trim() || null,
                    serial: serialInput.value.trim(),
                    codigoNFC: codigoNFCInput.value.trim() || null,
                    descripcion: descripcionInput.value.trim() || null,
                    imagenUrl: imagenUrlInput.value.trim() || null,
                    estado: estadoInput.checked
                };

                console.log('✅ Enviando:', data);

                const url = id === 0 ? API.elementos : `${API.elementos}/${id}`;
                const method = id === 0 ? 'POST' : 'PUT';

                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('❌ Error del servidor:', errorText);
                    throw new Error(errorText || 'Error al guardar');
                }

                editorModal.hide();
                await cargarTodosLosDatos();
                alert(id === 0 ? '✅ Elemento creado exitosamente' : '✅ Elemento actualizado exitosamente');

            } catch (error) {
                alert('❌ Error: ' + error.message);
                console.error('Error completo:', error);
            }
        };

        // ========== ELIMINAR ==========
        window.eliminarElementoGlobal = async function (id) {
            if (!confirm('¿Eliminar este elemento?')) return;

            try {
                const response = await fetch(`${API.elementos}/${id}`, { method: 'DELETE' });
                if (!response.ok) throw new Error('Error al eliminar');

                await cargarTodosLosDatos();
                alert('✅ Elemento eliminado exitosamente');

            } catch (error) {
                alert('❌ Error: ' + error.message);
            }
        };

        // ========== LIMPIAR FILTROS ==========
        window.limpiarFiltros = function () {
            searchInput.value = '';
            tipoFilter.value = '';
            tipoPropietarioFilter.value = '';
            estadoFilter.value = '';
            aplicarFiltros();
        };
    });
</script>