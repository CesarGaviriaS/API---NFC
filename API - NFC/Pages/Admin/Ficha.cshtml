@page
@model API___NFC.Pages.Admin.FichaModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Gestión de Fichas";
}

<style>
    .badge-role {
        font-size: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }

    .table tbody tr {
        transition: all 0.2s ease;
    }

        .table tbody tr:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

    .pagination .page-item.active .page-link {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }

    .pagination .page-link {
        color: #198754;
        border: 1px solid #dee2e6;
    }

        .pagination .page-link:hover {
            color: #146c43;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .form-label.required::after {
        content: " *";
        color: red;
    }
</style>

<div class="main-content">
    <partial name="_AdminSubNav" />

    <!-- Header -->
    <div class="card border-0 shadow-sm mb-3 bg-success text-white">
        <div class="card-body py-3 d-flex justify-content-between align-items-center">
            <h3 class="mb-0"><i class="bi bi-credit-card-2-front-fill me-2"></i>@ViewData["Title"]</h3>
            <button type="button" class="btn btn-light btn-lg" onclick="abrirModalCrear()">
                <i class="bi bi-plus-circle-fill me-2"></i>Crear Ficha
            </button>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card border-0 shadow-sm mb-3">
        <div class="card-body py-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-8">
                    <input id="searchInput" class="form-control form-control-sm" placeholder="🔍 Buscar por código de ficha..." />
                </div>
                <div class="col-md-2">
                    <select id="estadoFilter" class="form-select form-select-sm">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="limpiarFiltros()">
                        <i class="bi bi-x-circle"></i> Limpiar
                    </button>
                </div>
                <div class="col-md-1 text-center">
                    <span id="resultadosContador" class="badge bg-success py-2 px-3">0</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-success">
                        <tr>
                            <th class="py-3"><i class="bi bi-hash me-1"></i>ID</th>
                            <th class="py-3"><i class="bi bi-credit-card me-1"></i>Código Ficha</th>
                            <th class="py-3"><i class="bi bi-calendar-event me-1"></i>Fecha Inicio</th>
                            <th class="py-3"><i class="bi bi-calendar-check me-1"></i>Fecha Final</th>
                            <th class="py-3"><i class="bi bi-toggle-on me-1"></i>Estado</th>
                            <th class="py-3 text-center" style="width:15%"><i class="bi bi-gear-fill me-1"></i>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaDatos">
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <div class="spinner-border text-success"></div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Estado vacío -->
            <div id="emptyState" class="text-center py-5 d-none">
                <i class="bi bi-inbox display-1 text-muted opacity-25"></i>
                <p class="text-muted mt-3 fs-5">No se encontraron fichas</p>
            </div>

            <!-- Paginación -->
            <div id="paginacionContainer" class="d-flex justify-content-between align-items-center mt-3 px-3 pb-3">
                <div id="infoPaginacion">
                    <small class="text-muted">Cargando...</small>
                </div>
                <nav id="paginacionNav">
                    <ul class="pagination pagination-sm mb-0"></ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- MODAL -->
<div class="modal fade" id="editorModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalTitulo">
                    <i class="bi bi-credit-card-2-front-fill me-2"></i>Nueva Ficha
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="formularioEditor" onsubmit="return false;">
                    <input type="hidden" id="idInput">

                    <div class="mb-3">
                        <label class="form-label required">Código de Ficha</label>
                        <input type="text" id="codigoInput" class="form-control" required placeholder="Ej: 2558106" />
                        <small class="text-muted">Código único de identificación de la ficha</small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label required">Programa</label>
                        <select id="programaIdInput" class="form-select" required>
                            <option value="">Cargando programas...</option>
                        </select>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label required">Fecha de Inicio</label>
                            <input type="date" id="fechaInicioInput" class="form-control" required />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label required">Fecha Final</label>
                            <input type="date" id="fechaFinalInput" class="form-control" required />
                        </div>
                    </div>

                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="estadoInput" checked>
                        <label class="form-check-label" for="estadoInput">Ficha Activa</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cerrar
                </button>
                <button type="button" class="btn btn-success" onclick="guardarFicha()">
                    <i class="bi bi-check-circle me-1"></i>Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // ========== GESTIÓN DE FICHAS ==========
    document.addEventListener('DOMContentLoaded', function () {
        // ========== CONFIGURACIÓN API ==========
        const API = {
            fichas: '/api/Ficha',
            programas: '/api/Programas'
        };

        // ========== ELEMENTOS DEL DOM ==========
        const tablaDatos = document.getElementById('tablaDatos');
        const searchInput = document.getElementById('searchInput');
        const estadoFilter = document.getElementById('estadoFilter');
        const resultadosContador = document.getElementById('resultadosContador');
        const emptyState = document.getElementById('emptyState');

        // Modal
        const editorModal = new bootstrap.Modal(document.getElementById('editorModal'));
        const modalTitulo = document.getElementById('modalTitulo');
        const idInput = document.getElementById('idInput');
        const codigoInput = document.getElementById('codigoInput');
        const programaIdInput = document.getElementById('programaIdInput');
        const fechaInicioInput = document.getElementById('fechaInicioInput');
        const fechaFinalInput = document.getElementById('fechaFinalInput');
        const estadoInput = document.getElementById('estadoInput');

        // ========== ESTADO ==========
        let paginaActual = 1;
        let pageSize = 10;
        let todasLasFichas = [];
        let listaProgramas = [];

        // ========== INICIALIZACIÓN ==========
        init();

        function init() {
            cargarProgramas();
            cargarDatosPaginados(1);
            setupEventListeners();
        }

        // ========== EVENT LISTENERS ==========
        function setupEventListeners() {
            let timeout;
            searchInput.addEventListener('input', () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => aplicarFiltros(), 300);
            });

            estadoFilter.addEventListener('change', () => aplicarFiltros());
        }

        // ========== CARGAR PROGRAMAS ==========
        async function cargarProgramas() {
            try {
                const response = await fetch(API.programas);
                listaProgramas = await response.json();

                programaIdInput.innerHTML = '<option value="">Seleccione un programa...</option>';
                listaProgramas.forEach(p => {
                    programaIdInput.innerHTML += `<option value="${p.idPrograma}">${p.nombrePrograma}</option>`;
                });
            } catch (error) {
                console.error('Error al cargar programas:', error);
            }
        }

        // ========== CARGAR DATOS PAGINADOS ==========
        async function cargarDatosPaginados(pagina = 1) {
            try {
                paginaActual = pagina;
                tablaDatos.innerHTML = '<tr><td colspan="6" class="text-center py-4"><div class="spinner-border text-success"></div></td></tr>';

                const response = await fetch(`${API.fichas}/paged?pageNumber=${pagina}&pageSize=${pageSize}`);

                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();
                todasLasFichas = data.items || data.Items || [];
                const totalPaginas = data.totalPages || data.TotalPages || 1;
                const totalRegistros = data.totalCount || data.TotalCount || 0;

                renderizarTabla(todasLasFichas);
                renderizarPaginacionServidor(pagina, totalPaginas, totalRegistros);

            } catch (error) {
                console.error('❌ Error:', error);
                tablaDatos.innerHTML = `<tr><td colspan="6" class="text-center text-danger py-4">
                    <i class="bi bi-exclamation-triangle me-2"></i>Error: ${error.message}
                </td></tr>`;
            }
        }

        // ========== APLICAR FILTROS ==========
        function aplicarFiltros() {
            const search = searchInput.value.toLowerCase().trim();
            const estadoFiltro = estadoFilter.value;

            if (!search && !estadoFiltro) {
                document.getElementById('paginacionContainer').style.display = 'flex';
                cargarDatosPaginados(1);
                return;
            }

            document.getElementById('paginacionContainer').style.display = 'none';

            let filtrados = todasLasFichas.filter(f => {
                const coincideBusqueda = !search || (f.codigo && f.codigo.toLowerCase().includes(search));
                const coincideEstado = !estadoFiltro || f.estado?.toString() === estadoFiltro;
                return coincideBusqueda && coincideEstado;
            });

            renderizarTabla(filtrados);
        }

        // ========== RENDERIZAR TABLA ==========
        function renderizarTabla(fichas) {
            resultadosContador.textContent = fichas.length;

            if (fichas.length === 0) {
                tablaDatos.innerHTML = '';
                emptyState.classList.remove('d-none');
                return;
            }

            emptyState.classList.add('d-none');

            tablaDatos.innerHTML = fichas.map(f => {
                const fechaInicio = f.fechaInicio ? new Date(f.fechaInicio).toLocaleDateString() : 'N/A';
                const fechaFinal = f.fechaFinal ? new Date(f.fechaFinal).toLocaleDateString() : 'N/A';

                return `
                    <tr>
                        <td class="fw-semibold">${f.idFicha}</td>
                        <td><span class="badge bg-primary" style="font-size: 0.9rem;">${f.codigo || 'N/A'}</span></td>
                        <td><small class="text-muted">${fechaInicio}</small></td>
                        <td><small class="text-muted">${fechaFinal}</small></td>
                        <td><span class="badge ${f.estado ? 'bg-success' : 'bg-danger'}">${f.estado ? 'Activo' : 'Inactivo'}</span></td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-warning" onclick="editarFichaGlobal(${f.idFicha})">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="eliminarFichaGlobal(${f.idFicha})">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // ========== PAGINACIÓN ==========
        function renderizarPaginacionServidor(paginaActual, totalPaginas, totalRegistros) {
            const paginacionNav = document.getElementById('paginacionNav');
            const infoPaginacion = document.getElementById('infoPaginacion');
            const paginacionContainer = document.getElementById('paginacionContainer');

            paginacionContainer.style.display = 'flex';

            const inicio = ((paginaActual - 1) * pageSize) + 1;
            const fin = Math.min(paginaActual * pageSize, totalRegistros);

            infoPaginacion.innerHTML = `<small class="text-muted">Mostrando ${inicio}-${fin} de ${totalRegistros} registros</small>`;

            if (totalPaginas <= 1) {
                paginacionNav.innerHTML = '';
                return;
            }

            let html = '<ul class="pagination pagination-sm mb-0">';
            html += `<li class="page-item ${paginaActual === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="cambiarPaginaServidor(${paginaActual - 1}); return false;">«</a>
            </li>`;

            for (let i = 1; i <= totalPaginas; i++) {
                if (i === 1 || i === totalPaginas || (i >= paginaActual - 2 && i <= paginaActual + 2)) {
                    html += `<li class="page-item ${i === paginaActual ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="cambiarPaginaServidor(${i}); return false;">${i}</a>
                    </li>`;
                } else if (i === paginaActual - 3 || i === paginaActual + 3) {
                    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            html += `<li class="page-item ${paginaActual === totalPaginas ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="cambiarPaginaServidor(${paginaActual + 1}); return false;">»</a>
            </li>`;
            html += '</ul>';
            paginacionNav.innerHTML = html;
        }

        window.cambiarPaginaServidor = function (pagina) {
            if (pagina < 1) return;
            cargarDatosPaginados(pagina);
        };

        // ========== ABRIR MODAL ==========
        window.abrirModalCrear = function () {
            modalTitulo.textContent = 'Nueva Ficha';
            document.getElementById('formularioEditor').reset();
            idInput.value = '';
            estadoInput.checked = true;
            editorModal.show();
        };

        // ========== EDITAR ==========
        window.editarFichaGlobal = async function (id) {
            try {
                const response = await fetch(`${API.fichas}/${id}`);
                if (!response.ok) throw new Error('Error al cargar ficha');

                const data = await response.json();

                modalTitulo.textContent = 'Editar Ficha';
                idInput.value = data.idFicha;
                codigoInput.value = data.codigo || '';
                programaIdInput.value = data.idPrograma || '';
                fechaInicioInput.value = data.fechaInicio ? data.fechaInicio.split('T')[0] : '';
                fechaFinalInput.value = data.fechaFinal ? data.fechaFinal.split('T')[0] : '';
                estadoInput.checked = data.estado ?? true;

                editorModal.show();
            } catch (error) {
                alert('Error: ' + error.message);
            }
        };

        // ========== GUARDAR ==========
        window.guardarFicha = async function () {
            try {
                const id = parseInt(idInput.value) || 0;

                if (!codigoInput.value.trim() || !programaIdInput.value || !fechaInicioInput.value || !fechaFinalInput.value) {
                    alert('Complete todos los campos obligatorios');
                    return;
                }

                const fechaInicio = new Date(fechaInicioInput.value);
                const fechaFinal = new Date(fechaFinalInput.value);

                if (fechaFinal <= fechaInicio) {
                    alert('La fecha final debe ser posterior a la fecha de inicio');
                    return;
                }

                const data = {
                    idFicha: id,
                    codigo: codigoInput.value.trim(),
                    idPrograma: parseInt(programaIdInput.value),
                    fechaInicio: fechaInicioInput.value,
                    fechaFinal: fechaFinalInput.value,
                    estado: estadoInput.checked
                };

                const url = id === 0 ? API.fichas : `${API.fichas}/${id}`;
                const method = id === 0 ? 'POST' : 'PUT';

                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Error al guardar');
                }

                editorModal.hide();
                await cargarDatosPaginados(paginaActual);
                alert(id === 0 ? '✅ Ficha creada exitosamente' : '✅ Ficha actualizada exitosamente');

            } catch (error) {
                alert('❌ Error: ' + error.message);
            }
        };

        // ========== ELIMINAR ==========
        window.eliminarFichaGlobal = async function (id) {
            if (!confirm('¿Eliminar esta ficha?')) return;

            try {
                const response = await fetch(`${API.fichas}/${id}`, { method: 'DELETE' });
                if (!response.ok) throw new Error('Error al eliminar');

                await cargarDatosPaginados(paginaActual);
                alert('✅ Ficha eliminada exitosamente');
            } catch (error) {
                alert('❌ Error: ' + error.message);
            }
        };

        // ========== LIMPIAR FILTROS ==========
        window.limpiarFiltros = function () {
            searchInput.value = '';
            estadoFilter.value = '';
            paginaActual = 1;
            cargarDatosPaginados(1);
        };
    });
</script>