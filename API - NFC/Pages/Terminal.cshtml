@page
@model API___NFC.Pages.TerminalModel
@{
    ViewData["Title"] = "Dashboard Operativo";
    Layout = "_AdminLayout";
}
<style>
    :root {
        --color-sena: #00963f;
        --color-panel: #ffffff;
        --color-borde: #dee2e6;
        --color-texto: #212529;
    }

    /* --- ESTRUCTURA GENERAL --- */
    .terminal-layout {
        background-color: #f8f9fa;
    }

    .card {
        border-radius: 10px;
    }

    .card-header {
        font-size: 0.95rem;
    }

    /* --- PERFIL --- */
    #user-profile-content {
        color: var(--color-sena);
        font-weight: 500;
    }

    /* --- PANELES --- */
    #registered-elements-list .text-muted,
    #detected-elements-list .text-muted {
        font-size: 0.85rem;
    }

    #registered-elements-list,
    #detected-elements-list {
        background-color: var(--color-panel);
        border: 1px solid var(--color-borde);
        border-radius: 6px;
        min-height: 120px;
    }

    /* --- BOTONES --- */
    .btn-primary {
        background-color: var(--color-sena);
        border-color: var(--color-sena);
    }

        .btn-primary:hover {
            background-color: #007a34;
            border-color: #007a34;
        }

    .btn-outline-danger {
        border-width: 1.5px;
    }

    /* --- HISTORIAL --- */
    #history-list {
        background-color: #fff;
        border-radius: 6px;
        border: 1px solid var(--color-borde);
        padding: 8px;
    }

    /* Tarjetas pequeñas del historial (Entrada / Salida) */
    .history-item {
        border-radius: 6px;
        padding: 6px 8px;
        margin-bottom: 6px;
        font-size: 0.8rem;
    }

        .history-item .tipo {
            font-weight: 600;
            color: #fff;
            border-radius: 4px;
            padding: 2px 6px;
            margin-right: 4px;
        }

        .history-item.salida .tipo {
            background-color: #0d6efd;
        }

        .history-item.entrada .tipo {
            background-color: #d63384;
        }
        #last-detected-item-content .element-item{

            display: flex;
            align-items: center;
            gap:10px;
        }
        #last-detected-item-content .element-image{
            width: 64px;
            height: 64px;
            border-radius: 8px;
            object-fit: cover;
            border: 1px solid #dee2e6;
        }


</style>

<div class="container-fluid py-3 terminal-layout">
    <div class="row g-2">

        <!-- PANEL IZQUIERDO: HISTORIAL -->
        <div class="col-md-3">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light text-center fw-bold text-secondary">
                    Historial de Sesión
                </div>
                <div class="card-body p-2 overflow-auto" id="history-list" style="max-height: 80vh;">
                    <p class="text-muted small text-center mt-3">Sin registros</p>
                </div>
            </div>
        </div>

        <!-- PANEL CENTRAL -->
        <div class="col-md-9 d-flex flex-column">

            <!-- PERFIL -->
            <div class="card shadow-sm mb-3">
                <div class="card-body d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle bg-secondary bg-opacity-25 d-flex align-items-center justify-content-center me-3" style="width:80px; height:80px;">
                            <i class="bi bi-person fs-1 text-secondary"></i>
                        </div>
                        <div id="user-profile-content">
                            <p class="text-muted m-0">Inicie un proceso para ver los datos.</p>
                        </div>
                    </div>

                    <!-- BOTÓN INICIAR PROCESO NFC -->
                    <button id="btnNuevoProceso" class="btn btn-success d-flex align-items-center gap-2">
                        <i class="bi bi-broadcast-pin"></i>
                        <span>Iniciar Proceso</span>
                    </button>
                </div>
            </div>

            <!-- PANELES DE ELEMENTOS -->
            <div class="row g-3 flex-grow-1">
                <div class="col-md-6 d-flex flex-column">
                    <div class="card shadow-sm border-success flex-grow-1">
                        <div class="card-header bg-success bg-opacity-10 text-center text-success fw-bold">
                            Dentro del CIMM
                        </div>
                        <div class="card-body p-2" id="registered-elements-list" style="overflow-y: auto;">
                            <p class="text-muted text-center small mt-2">Inicie un proceso para ver los datos.</p>
                        </div>
                    </div>
                </div>

                <div class="col-md-6 d-flex flex-column">
                    <div class="card shadow-sm border-warning flex-grow-1">
                        <div class="card-header bg-warning bg-opacity-10 text-center text-warning fw-bold">
                            Fuera del CIMM
                        </div>
                        <div class="card-body p-2" id="detected-elements-list" style="overflow-y: auto;">
                            <p class="text-muted text-center small mt-2">Inicie un proceso para ver los datos.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- BOTONES DE CONTROL -->
            <div class="d-flex justify-content-center gap-3 mt-4">
                <button id="btnEjecutar" class="btn btn-primary px-4" disabled>
                    <i class="bi bi-play-fill me-1"></i> Ejecutar
                </button>
                <button id="btnReiniciar" class="btn btn-outline-danger px-4" disabled>
                    <i class="bi bi-x-circle me-1"></i> Cancelar
                </button>
            </div>

            <div class="card shadow-sm mt-3">
                <div class="card-header bg-light text-center fw-bold text-primary">
                    último elemento detectado
                </div>
                <div class="card-body" id="last-detected-item-content">
                    Esperando escaneo.....
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Contenedor para Toasts -->
<div id="toast-container" style="position: fixed; bottom: 1rem; right: 1rem; z-index: 1050;"></div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- URLs de la API (generadas por Razor para mayor robustez) ---
            const getUserDataUrl = '@Url.Action("GetUserData", "Terminal")';
            const finalizarProcesoUrl = '@Url.Action("FinalizarProceso", "Terminal")';

            // --- Estado de la Aplicación ---
            let esProcesoActivo = false;
            let usuarioActual = null;
            let elementosDetectados = new Set();
            let tipoProcesoSeleccionado = 'entrada';

            // --- Referencias al DOM ---
            const userProfileContent = document.getElementById('user-profile-content');
            const registeredElementsList = document.getElementById('registered-elements-list');
            const detectedElementsList = document.getElementById('detected-elements-list');
            const lastDetectedItemContent = document.getElementById('last-detected-item-content');
            const btnNuevoProceso = document.getElementById('btnNuevoProceso');
            const btnEjecutar = document.getElementById('btnEjecutar');
            const btnReiniciar = document.getElementById('btnReiniciar');
            const radiosTipoProceso = document.querySelectorAll('input[name="tipoProceso"]');
            const historyList = document.getElementById('history-list');

            // --- Lógica de UI (Skeletons, Renderizado, Notificaciones) ---
            const showToast = (message, type = 'info') => {
                const toastId = 'toast-' + Date.now();
                const toastColorClasses = {
                    success: 'bg-success text-white',
                    error: 'bg-danger text-white',
                    info: 'bg-primary text-white',
                    warning: 'bg-warning text-dark'
                };
                const toastHTML = `
                    <div id="${toastId}" class="toast show mb-2 ${toastColorClasses[type]}" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-body">${message}</div>
                    </div>`;
                document.getElementById('toast-container').insertAdjacentHTML('beforeend', toastHTML);
                setTimeout(() => document.getElementById(toastId)?.remove(), 4000);
            };

            const logHistory = (message) => {
                const time = new Date().toLocaleTimeString();
                historyList.innerHTML += `<div><span class="text-muted small">${time}:</span> ${message}</div>`;
                historyList.scrollTop = historyList.scrollHeight; // Auto-scroll
            };

            const renderProfileSkeleton = () => {
                userProfileContent.innerHTML = `
                    <div class="profile-card">
                        <div class="profile-header">
                            <div class="profile-avatar skeleton skeleton-avatar"></div>
                            <div class="profile-info">
                                <p class="profile-role skeleton skeleton-text" style="width: 40%;"></p>
                                <hr class="profile-divider">
                                <h3 class="profile-name skeleton skeleton-text" style="height: 1.2rem; width: 80%;"></h3>
                                <div class="profile-details">
                                    <span class="skeleton skeleton-text" style="width: 90%;"></span><span class="skeleton skeleton-text" style="width: 60%;"></span>
                                </div>
                            </div>
                        </div>
                        <p class="profile-program skeleton skeleton-text" style="width: 100%; margin-top: 1rem;"></p>
                    </div>`;
            };
            const renderElementsSkeleton = (count = 3) => {
                let skeletonHTML = '';
                for (let i = 0; i < count; i++) {
                    skeletonHTML += `
                        <div class="element-item skeleton-item">
                            <div class="skeleton element-image"></div>
                            <div class="element-details">
                                <div class="skeleton skeleton-text" style="width: 80%;"></div>
                                <div class="skeleton skeleton-text" style="width: 60%;"></div>
                            </div>
                        </div>`;
                }
                return skeletonHTML;
            };

            const renderProfileData = (usuario) => {
                 userProfileContent.innerHTML = `
                    <div class="profile-card">
                        <div class="profile-header">
                            <div class="profile-avatar">
                                <img src="${usuario.avatarUrl || 'https://placehold.co/80x80/666/fff?text=' + usuario.nombre.charAt(0)}" alt="Avatar" style="width: 100%; height: 100%; border-radius: 8px; object-fit: cover;">
                            </div>
                            <div class="profile-info">
                                <p class="profile-role">${usuario.rol || 'Rol no definido'}</p>
                                <hr class="profile-divider">
                                <h3 class="profile-name">${usuario.nombre || 'Nombre no disponible'}</h3>
                                <div class="profile-details">
                                    <span><strong>N° Id:</strong> ${usuario.documento || 'N/A'}</span>
                                    <span><strong>N° ficha:</strong> ${usuario.ficha || 'N/A'}</span>
                                </div>
                            </div>
                        </div>
                        <p class="profile-program">${usuario.programa || 'Programa no disponible'}</p>
                    </div>`;
            };

            const renderRegisteredElements = (elementos) => {
                registeredElementsList.innerHTML = '';
                if (elementos && elementos.length > 0) {
                    const truncate = (text, maxLength) => (!text || text.length <= maxLength) ? (text || 'N/A') : text.substring(0, maxLength) + '...';

                    elementos.forEach(el => {
                        const imageUrl = el.imageUrl || 'https://placehold.co/64x64/eee/ccc?text=Sin+Img';
                        const itemHTML = `
                            <div class="element-item" id="reg-el-${el.idElemento}">
                                <img class="element-image" src="${imageUrl}" alt="${el.nombreElemento}" loading="lazy" onerror="this.onerror=null;this.src='https://placehold.co/64x64/eee/ccc?text=Error';">
                                <div class="element-details">
                                    <strong>${el.nombreElemento}</strong>
                                    <p class="text-muted small mb-1"><strong>Marca:</strong> ${el.marca || 'N/A'} | <strong>S/N:</strong> ${el.serial || 'N/A'}</p>
                                    <p class="text-muted small mb-1" title="${el.caracteristicasTecnicas || ''}"><strong>Técnicas:</strong> ${truncate(el.caracteristicasTecnicas, 40)}</p>
                                    <p class="text-muted small mb-1" title="${el.caracteristicasFisicas || ''}"><strong>Físicas:</strong> ${truncate(el.caracteristicasFisicas, 40)}</p>
                                    <p class="text-muted small mb-0" title="${el.detalles || ''}"><strong>Detalles:</strong> ${truncate(el.detalles, 40)}</p>
                                </div>
                                <button class="manual-add-btn" data-element-id="${el.idElemento}" title="Agregar manualmente">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right-circle-fill" viewBox="0 0 16 16"><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z"/></svg>
                                </button>
                            </div>`;
                        registeredElementsList.insertAdjacentHTML('beforeend', itemHTML);
                    });
                } else {
                    registeredElementsList.innerHTML = '<p class="text-muted text-center">Este usuario no tiene elementos activos registrados.</p>';
                }
            };

            const addElementoDetectado = (elementId, source) => {
                if (!usuarioActual || elementosDetectados.has(elementId)) return;
                const elementoData = usuarioActual.elementos.find(el => el.idElemento === elementId);
                if (!elementoData) return;

                elementosDetectados.add(elementId);
                logHistory(`Elemento '${elementoData.nombreElemento}' añadido (${source.toUpperCase()}).`);

                const placeholder = detectedElementsList.querySelector('p.text-muted');
                if (placeholder) placeholder.remove();

                const tagClass = source === 'nfc' ? 'tag-nfc' : 'tag-manual';
                const tagText = source === 'nfc' ? 'NFC' : 'Manual';
                const imageUrl = elementoData.imageUrl || 'https://placehold.co/64x64/eee/ccc?text=Sin+Img';

                const itemHTML_Base = `
                    <img class="element-image" src="${imageUrl}" alt="${elementoData.nombreElemento}" loading="lazy" onerror="this.onerror=null;this.src='https://placehold.co/64x64/eee/ccc?text=Error';">
                    <div class="element-details">
                        <strong>${elementoData.nombreElemento}</strong>
                        <p class="text-muted small">S/N: ${elementoData.serial || 'N/A'}</p>
                    </div>
                    <span class="entry-method-tag ${tagClass}">${tagText}</span>`;

                const itemHTML_ListaPrincipal = `
                    <div class="element-item" id="det-el-${elementoData.idElemento}">
                        <button class="revert-btn" data-element-id="${elementoData.idElemento}" title="Retirar elemento">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="red" class="bi bi-arrow-left-circle-fill" viewBox="0 0 16 16"><path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm3.5 7.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z"/></svg>
                        </button>
                        ${itemHTML_Base}
                    </div>`;

                const itemHTML_UltimoElemento = `<div class="element-item">${itemHTML_Base}</div>`;

                if (source === 'nfc') {
                    lastDetectedItemContent.innerHTML = itemHTML_UltimoElemento;
                }
                detectedElementsList.insertAdjacentHTML('beforeend', itemHTML_ListaPrincipal);

                document.getElementById(`reg-el-${elementId}`)?.classList.add('highlighted');
                actualizarEstadoBotones();
            };

            const revertirElemento = (elementId) => {
                if (!elementosDetectados.has(elementId)) return;
                elementosDetectados.delete(elementId);

                const elementoDetectado = document.getElementById(`det-el-${elementId}`);
                if(elementoDetectado) {
                    logHistory(`Elemento '${elementoDetectado.querySelector('strong').textContent}' revertido.`);
                    elementoDetectado.remove();
                }

                document.getElementById(`reg-el-${elementId}`)?.classList.remove('highlighted');

                if (elementosDetectados.size === 0) {
                    detectedElementsList.innerHTML = '<p class="text-muted text-center">Inicie un proceso para ver los datos.</p>';
                }
                actualizarEstadoBotones();
            };

            async function fetchUserData(userId, firstElementId) {
                renderProfileSkeleton();
                registeredElementsList.innerHTML = renderElementsSkeleton();
                logHistory(`Recibido tag inicial. Obteniendo datos del usuario ID: ${userId}...`);

                try {
                    const response = await fetch(`${getUserDataUrl}?idUsuario=${userId}`);
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.mensaje || `Error del servidor: ${response.status}`);
                    }
                    usuarioActual = await response.json();
                    renderProfileData(usuarioActual);
                    renderRegisteredElements(usuarioActual.elementos);
                    addElementoDetectado(firstElementId, 'nfc');
                    logHistory(`Datos de <strong>${usuarioActual.nombre}</strong> cargados con éxito.`);
                    showToast(`Usuario ${usuarioActual.nombre} cargado.`, 'success');
                } catch (error) {
                    console.error("Error al obtener datos del usuario:", error);
                    userProfileContent.innerHTML = `<p class="text-danger text-center">Error al cargar el usuario. ${error.message}</p>`;
                    logHistory(`<strong>Error:</strong> ${error.message}`);
                    showToast(error.message, 'error');
                    reiniciarProceso(false);
                }
            }

            const reiniciarProceso = (limpiarUsuario = true) => {
                logHistory('Proceso reiniciado.');
                esProcesoActivo = false;
                if (limpiarUsuario) usuarioActual = null;
                elementosDetectados.clear();

                btnNuevoProceso.textContent = "Iniciar Proceso";
                btnNuevoProceso.disabled = false;

                if (limpiarUsuario) {
                    userProfileContent.innerHTML = '<p class="text-muted text-center">Inicie un proceso para ver los datos.</p>';
                    registeredElementsList.innerHTML = '<p class="text-muted text-center">Inicie un proceso para ver los datos.</p>';
                }
                detectedElementsList.innerHTML = '<p class="text-muted text-center">Inicie un proceso para ver los datos.</p>';
                lastDetectedItemContent.innerHTML = '<p class="text-muted text-center small mt-2">Esperando escaneo...</p>';
                actualizarEstadoBotones();
            };

            const actualizarEstadoBotones = () => {
                const hayElementos = elementosDetectados.size > 0;
                btnEjecutar.disabled = !hayElementos;
                btnReiniciar.disabled = !esProcesoActivo;
            };

            btnNuevoProceso.addEventListener('click', () => {
                esProcesoActivo = true;
                btnNuevoProceso.textContent = "Proceso Activo...";
                btnNuevoProceso.disabled = true;
                actualizarEstadoBotones();
                logHistory("<strong>Nuevo proceso iniciado.</strong> Esperando tag...");
                showToast('Proceso iniciado. Esperando escaneo de tag.', 'info');
            });

            btnReiniciar.addEventListener('click', () => reiniciarProceso(true));

            btnEjecutar.addEventListener('click', async () => {
                if (elementosDetectados.size === 0) return;

                const datosParaEnviar = {
                    idUsuario: usuarioActual.idUsuario,
                    elementos: Array.from(elementosDetectados),
                    tipoProceso: tipoProcesoSeleccionado
                };

                logHistory(`Ejecutando proceso de <strong>${tipoProcesoSeleccionado.toUpperCase()}</strong>...`);
                btnEjecutar.disabled = true;
                btnEjecutar.textContent = 'Procesando...';

                try {
                    const response = await fetch(finalizarProcesoUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(datosParaEnviar)
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.mensaje || 'Error del servidor.');

                    showToast(result.mensaje, 'success');
                    logHistory(`<strong>Éxito:</strong> ${result.mensaje}`);
                    reiniciarProceso(true);
                } catch (error) {
                    console.error("Error al ejecutar el proceso:", error);
                    showToast(error.message, 'error');
                    logHistory(`<strong>Error al ejecutar:</strong> ${error.message}`);
                    btnEjecutar.textContent = 'Ejecutar Proceso';
                    actualizarEstadoBotones();
                }
            });

            detectedElementsList.addEventListener('click', (event) => {
                const revertButton = event.target.closest('.revert-btn');
                if (revertButton) {
                    revertirElemento(parseInt(revertButton.dataset.elementId, 10));
                }
            });

            radiosTipoProceso.forEach(radio => {
                radio.addEventListener('change', function() {
                    tipoProcesoSeleccionado = this.id === 'btnEntrada' ? 'entrada' : 'salida';
                    logHistory(`Tipo de proceso cambiado a: ${tipoProcesoSeleccionado.toUpperCase()}`);
                });
            });

            registeredElementsList.addEventListener('click', (event) => {
                const button = event.target.closest('.manual-add-btn');
                if (button) {
                    if (esProcesoActivo && usuarioActual) {
                        addElementoDetectado(parseInt(button.dataset.elementId, 10), 'manual');
                    } else {
                        showToast("Por favor, inicie un proceso y escanee un tag del usuario primero.", 'warning');
                    }
                }
            });

            const connection = new signalR.HubConnectionBuilder().withUrl("/nfcHub").withAutomaticReconnect().build();
            connection.on("RecibirDatosTag", (tagData) => {
                if (!esProcesoActivo) return;
                const [idUsuario, idElemento] = tagData.split(',').map(Number);
                if (isNaN(idUsuario) || isNaN(idElemento)) return;

                if (!usuarioActual) {
                    fetchUserData(idUsuario, idElemento);
                } else if (idUsuario === usuarioActual.idUsuario) {
                    addElementoDetectado(idElemento, 'nfc');
                } else {
                    showToast('Tag de un usuario diferente detectado. Reinicie el proceso para cambiar de usuario.', 'warning');
                    logHistory(`Tag de usuario incorrecto (ID: ${idUsuario}) detectado.`);
                }
            });

            async function startSignalR() {
                 try {
                    await connection.start();
                    console.log("Conectado a SignalR.");
                    logHistory("Conexión con el agente NFC establecida.");
                 } catch (err) {
                    console.error("Error de conexión con SignalR:", err);
                    logHistory("<strong>Error:</strong> No se pudo conectar con el agente NFC.");
                    showToast('No se pudo conectar con el agente Lector. Verifique que esté en ejecución y recargue la página.', 'error');
                    setTimeout(startSignalR, 5000);
                 }
            }
            startSignalR();
            actualizarEstadoBotones();
            logHistory("Dashboard inicializado. Listo para iniciar un proceso.");
        });
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/terminal.css" />
}